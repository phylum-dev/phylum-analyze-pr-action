#                   _
#  __ _ _ __   __ _| |_   _ _______
# / _` | '_ \ / _` | | | | |_  / _ \
#| (_| | | | | (_| | | |_| |/ /  __/
# \__,_|_| |_|\__,_|_|\__, /___\___|
#                    |___/
name: 'Analyze PR'
description: 'Analyze Pull request'
inputs:
  vul_threshold:
    description: "Vulnerability risk score threshold value"
    required: true
  mal_threshold:
    description: "Malicious Code risk score threshold value"
    required: true
  eng_threshold:
    description: "Engineering risk score threshold value"
    required: true
  lic_threshold:
    description: "License risk score threshold value"
    required: true
  aut_threshold:
    description: "Author risk score threshold value"
    required: true
  phylum_token:
    description: "Phylum token"
    required: true
  phylum_version:
    description: "Phylum version"
    required: false
    default: '0'
  incomplete_package_strategy:
    description: "Method for resolving incomplete packages"
    required: false
    default: "pass_with_comment"
  invoke_test_matrix:
    description: "Only used for testing"
    required: false
    default: false


runs:
  using: "composite"
  steps:
    - id: phylum-test
      uses: phylum-dev/install-phylum-latest-action@v1.3
      with:
        phylum_token: ${{ inputs.phylum_token }}
        phylum_version: ${{ inputs.phylum_version }}

    - name: Check for previous comment
      uses: peter-evans/find-comment@v1
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body-includes: INCOMPLETE

    - name: Store result of id=fc in environment
      shell: bash
      if: "contains(steps.fc.outputs.comment-body, 'Phylum')"
      run: |
        echo "storing PREVIOUS_INCOMPLETE"
        echo PREVIOUS_INCOMPLETE=1 >> $GITHUB_ENV

    - name: Check for existing project
      shell: bash
      run: |
        result=$(find . -maxdepth 1 -iname ".phylum_project")
        if [[ -n $result ]]; then
          echo "[*] Phylum project found: $result"
        else
          echo "[ERROR] Phylum project file not found"
          exit 11
        fi

    - name: Generate Phylum label
      shell: bash
      run: |
        echo PHYLUM_LABEL="GHA-PR${{ github.event.number }}-${GITHUB_HEAD_REF}" >> $GITHUB_ENV

    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: install python dependencies
      shell: bash
      run: |
        pip install unidiff

    - name: run analyze.py pr_type
      shell: bash
      run: python $GITHUB_ACTION_PATH/analyze.py "pr_type" $GITHUB_REPOSITORY ${{ github.event.number }}

    - name: cat prtype
      shell: bash
      run: cat ~/prtype.txt

    - id: get-prtype
      shell: bash
      run: |
        ret="$(cat ~/prtype.txt)"
        ret="${ret//'%'/'%25'}"
        ret="${ret//$'\n'/'%0A'}"
        ret="${ret//$'\r'/'%0A'}"
        echo "::set-output name=prtype::$ret"

    - id: should-proceed
      shell: bash
      if: "contains(steps.get-prtype.outputs.prtype, 'NA')"
      run: |
        echo 'exiting with 0 since package dependency files were not modified'
        echo '0' > $HOME/returncode.txt

    - name: Analyze project lockfile
      shell: bash
      if: "!contains(steps.get-prtype.outputs.prtype, 'NA')"
      run: |
        export PATH="$HOME/.phylum:$PATH"
        pushd $GITHUB_WORKSPACE || exit 11
          phylum analyze -l $PHYLUM_LABEL ${{ steps.get-prtype.outputs.prtype }} --verbose --json > ~/phylum_analysis.json
          echo "[*] Analyzed ${{ steps.get-prtype.outputs.prtype }} under label ${PHYLUM_LABEL} and wrote results to ~/phylum_analysis.json"
        popd


    # - name: tmate
      # uses: mxschmitt/action-tmate@v3

    - name: invoke test matrix
      shell: bash
      if: "contains(inputs.invoke_test_matrix, 'true')"
      run: |
        python $GITHUB_ACTION_PATH/test_matrix.py

    - name: python script analyze.py
      shell: bash
      if: "!contains(steps.get-prtype.outputs.prtype, 'NA')"
      run: python $GITHUB_ACTION_PATH/analyze.py "analyze" $GITHUB_REPOSITORY ${{ github.event.number }} ${{ inputs.vul_threshold }} ${{ inputs.mal_threshold }} ${{ inputs.eng_threshold }} ${{ inputs.lic_threshold }} ${{ inputs.aut_threshold }}

    # - name: tmate
      # uses: mxschmitt/action-tmate@v3

    - id: get-returncode
      shell: bash
      run: |
        ret="$(cat ~/returncode.txt)"
        ret="${ret//'%'/'%25'}"
        ret="${ret//$'\n'/'%0A'}"
        ret="${ret//$'\r'/'%0A'}"
        echo "::set-output name=ret::$ret"

    # This will catch SUCCESS cases
    - name: return 0 for success
      shell: bash
      if: "contains(steps.get-returncode.outputs.ret, '0')"
      run: |
        echo 'exiting with 0 for success'
        exit 0

    - id: get-comment-body
      # this will have to check for 1 or 5 AND if on the second run
      # if: "contains(steps.get-returncode.outputs.ret, '1')"
      if: "steps.get-returncode.outputs.ret > 0"
      shell: bash
      run: |
        body="$(cat ~/pr_comment.txt)"
        body="${body//'%'/'%25'}"
        body="${body//$'\n'/'%0A'}"
        body="${body//$'\r'/'%0A'}"
        echo "::set-output name=body::$body"

    - name: Set comment
      # This will have to check for 1 or 5
      # Could check for > 0 ?
      #if: "contains(steps.get-returncode.outputs.ret, '1')"
      if: "steps.get-returncode.outputs.ret > 0"
      uses: peter-evans/create-or-update-comment@v1
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: ${{ steps.get-comment-body.outputs.body }}

    # This will catch INCOMPLETE and COMPLETE_SUCCESS
    - name: handle ret values of 4 or 5
      shell: bash
      if: "steps.get-returncode.outputs.ret >= 4"
      run: |
        echo 'exiting with 0 for success - ret = ${{ steps.get-returncode.outputs.ret }}'
        exit 0

    # This will catch FAILURE and COMPLETE_FAILURE
    - name: return 1 for risk analysis failure
      shell: bash
      if: "contains(steps.get-returncode.outputs.ret, '1')"
      run: |
        echo 'exiting with 1 for risk analysis failure'
        exit 1

